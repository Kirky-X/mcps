name: TimeMaster CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'mcp/timemaster/**'
      - '.github/workflows/timemaster-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'mcp/timemaster/**'
      - '.github/workflows/timemaster-ci.yml'
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.8'
  WORKING_DIRECTORY: 'mcp/timemaster'

jobs:
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 isort mypy
        pip install -e .
    
    - name: Run Black (code formatting check)
      run: black --check --diff .
    
    - name: Run isort (import sorting check)
      run: isort --check-only --diff .
    
    - name: Run Flake8 (linting)
      run: flake8 .
    
    - name: Run MyPy (type checking)
      run: mypy timemaster/ --ignore-missing-imports

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.python-version }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
    
    - name: Test MCP Service
      run: |
        # Test if the MCP service can start properly
        timeout 10s python -m timemaster.mcp_service || true
        echo "MCP service test completed"
    
    - name: Test CLI functionality
      run: |
        # Test CLI commands
        python -m timemaster --help
        python -m timemaster get-time
        python -m timemaster get-local-timezone
        python -m timemaster search-timezones "tokyo" --limit 1

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        pip install -e .
    
    - name: Run Bandit (security linting)
      run: bandit -r timemaster/ -f json -o bandit-report.json || true
    
    - name: Run Safety (dependency vulnerability check)
      run: safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          ${{ env.WORKING_DIRECTORY }}/bandit-report.json
          ${{ env.WORKING_DIRECTORY }}/safety-report.json

  build-and-package:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [lint-and-format, test]
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: timemaster-package
        path: ${{ env.WORKING_DIRECTORY }}/dist/

  deploy:
    name: Deploy to PyPI
    runs-on: ubuntu-latest
    needs: [build-and-package, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    environment:
      name: pypi
      url: https://pypi.org/p/timemaster
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: timemaster-package
        path: ${{ env.WORKING_DIRECTORY }}/dist/
    
    - name: Install twine
      run: pip install twine
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: twine upload dist/*

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [lint-and-format, test, security-scan, build-and-package]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.lint-and-format.result == 'success' && needs.test.result == 'success' && needs.build-and-package.result == 'success' }}
      run: |
        echo "✅ TimeMaster CI/CD pipeline completed successfully!"
        echo "All checks passed: linting, testing, security scan, and build."
    
    - name: Notify on failure
      if: ${{ needs.lint-and-format.result == 'failure' || needs.test.result == 'failure' || needs.security-scan.result == 'failure' || needs.build-and-package.result == 'failure' }}
      run: |
        echo "❌ TimeMaster CI/CD pipeline failed!"
        echo "Please check the failed jobs and fix the issues."
        exit 1